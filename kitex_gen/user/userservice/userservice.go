// Code generated by Kitex v0.3.1. DO NOT EDIT.

package userservice

import (
	"context"
	"douyin-demo-micro/kitex_gen/user"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser":   kitex.NewMethodInfo(createUserHandler, newUserServiceCreateUserArgs, newUserServiceCreateUserResult, false),
		"CheckUser":    kitex.NewMethodInfo(checkUserHandler, newUserServiceCheckUserArgs, newUserServiceCheckUserResult, false),
		"FindUser":     kitex.NewMethodInfo(findUserHandler, newUserServiceFindUserArgs, newUserServiceFindUserResult, false),
		"MGetUser":     kitex.NewMethodInfo(mGetUserHandler, newUserServiceMGetUserArgs, newUserServiceMGetUserResult, false),
		"Follow":       kitex.NewMethodInfo(followHandler, newUserServiceFollowArgs, newUserServiceFollowResult, false),
		"Unfollow":     kitex.NewMethodInfo(unfollowHandler, newUserServiceUnfollowArgs, newUserServiceUnfollowResult, false),
		"FollowList":   kitex.NewMethodInfo(followListHandler, newUserServiceFollowListArgs, newUserServiceFollowListResult, false),
		"FollowerList": kitex.NewMethodInfo(followerListHandler, newUserServiceFollowerListArgs, newUserServiceFollowerListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceCreateUserArgs)
	realResult := result.(*user.UserServiceCreateUserResult)
	success, err := handler.(user.UserService).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCreateUserArgs() interface{} {
	return user.NewUserServiceCreateUserArgs()
}

func newUserServiceCreateUserResult() interface{} {
	return user.NewUserServiceCreateUserResult()
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceCheckUserArgs)
	realResult := result.(*user.UserServiceCheckUserResult)
	success, err := handler.(user.UserService).CheckUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCheckUserArgs() interface{} {
	return user.NewUserServiceCheckUserArgs()
}

func newUserServiceCheckUserResult() interface{} {
	return user.NewUserServiceCheckUserResult()
}

func findUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFindUserArgs)
	realResult := result.(*user.UserServiceFindUserResult)
	success, err := handler.(user.UserService).FindUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFindUserArgs() interface{} {
	return user.NewUserServiceFindUserArgs()
}

func newUserServiceFindUserResult() interface{} {
	return user.NewUserServiceFindUserResult()
}

func mGetUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceMGetUserArgs)
	realResult := result.(*user.UserServiceMGetUserResult)
	success, err := handler.(user.UserService).MGetUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceMGetUserArgs() interface{} {
	return user.NewUserServiceMGetUserArgs()
}

func newUserServiceMGetUserResult() interface{} {
	return user.NewUserServiceMGetUserResult()
}

func followHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFollowArgs)
	realResult := result.(*user.UserServiceFollowResult)
	success, err := handler.(user.UserService).Follow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowArgs() interface{} {
	return user.NewUserServiceFollowArgs()
}

func newUserServiceFollowResult() interface{} {
	return user.NewUserServiceFollowResult()
}

func unfollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUnfollowArgs)
	realResult := result.(*user.UserServiceUnfollowResult)
	success, err := handler.(user.UserService).Unfollow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUnfollowArgs() interface{} {
	return user.NewUserServiceUnfollowArgs()
}

func newUserServiceUnfollowResult() interface{} {
	return user.NewUserServiceUnfollowResult()
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFollowListArgs)
	realResult := result.(*user.UserServiceFollowListResult)
	success, err := handler.(user.UserService).FollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowListArgs() interface{} {
	return user.NewUserServiceFollowListArgs()
}

func newUserServiceFollowListResult() interface{} {
	return user.NewUserServiceFollowListResult()
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFollowerListArgs)
	realResult := result.(*user.UserServiceFollowerListResult)
	success, err := handler.(user.UserService).FollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowerListArgs() interface{} {
	return user.NewUserServiceFollowerListArgs()
}

func newUserServiceFollowerListResult() interface{} {
	return user.NewUserServiceFollowerListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, req *user.CreateUserRequest) (r *user.CreateUserResponse, err error) {
	var _args user.UserServiceCreateUserArgs
	_args.Req = req
	var _result user.UserServiceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUser(ctx context.Context, req *user.CheckUserRequest) (r *user.CheckUserResponse, err error) {
	var _args user.UserServiceCheckUserArgs
	_args.Req = req
	var _result user.UserServiceCheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindUser(ctx context.Context, req *user.FindUserRequest) (r *user.FindUserResponse, err error) {
	var _args user.UserServiceFindUserArgs
	_args.Req = req
	var _result user.UserServiceFindUserResult
	if err = p.c.Call(ctx, "FindUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetUser(ctx context.Context, req *user.MGetUserRequest) (r *user.MGetUserResponse, err error) {
	var _args user.UserServiceMGetUserArgs
	_args.Req = req
	var _result user.UserServiceMGetUserResult
	if err = p.c.Call(ctx, "MGetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Follow(ctx context.Context, req *user.FollowRequest) (r *user.FollowResponse, err error) {
	var _args user.UserServiceFollowArgs
	_args.Req = req
	var _result user.UserServiceFollowResult
	if err = p.c.Call(ctx, "Follow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Unfollow(ctx context.Context, req *user.UnfollowRequest) (r *user.UnfollowResponse, err error) {
	var _args user.UserServiceUnfollowArgs
	_args.Req = req
	var _result user.UserServiceUnfollowResult
	if err = p.c.Call(ctx, "Unfollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, req *user.FollowListRequest) (r *user.FollowListResponse, err error) {
	var _args user.UserServiceFollowListArgs
	_args.Req = req
	var _result user.UserServiceFollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, req *user.FollowerListRequest) (r *user.FollowerListResponse, err error) {
	var _args user.UserServiceFollowerListArgs
	_args.Req = req
	var _result user.UserServiceFollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
