// Code generated by Kitex v0.3.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"douyin-demo-micro/kitex_gen/user"
	"douyin-demo-micro/kitex_gen/video"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateVideo":        kitex.NewMethodInfo(createVideoHandler, newVideoServiceCreateVideoArgs, newVideoServiceCreateVideoResult, false),
		"Feed":               kitex.NewMethodInfo(feedHandler, newVideoServiceFeedArgs, newVideoServiceFeedResult, false),
		"MGetVideo":          kitex.NewMethodInfo(mGetVideoHandler, newVideoServiceMGetVideoArgs, newVideoServiceMGetVideoResult, false),
		"PublishList":        kitex.NewMethodInfo(publishListHandler, newVideoServicePublishListArgs, newVideoServicePublishListResult, false),
		"FavoriteList":       kitex.NewMethodInfo(favoriteListHandler, newVideoServiceFavoriteListArgs, newVideoServiceFavoriteListResult, false),
		"Favorite":           kitex.NewMethodInfo(favoriteHandler, newVideoServiceFavoriteArgs, newVideoServiceFavoriteResult, false),
		"Unfavorite":         kitex.NewMethodInfo(unfavoriteHandler, newVideoServiceUnfavoriteArgs, newVideoServiceUnfavoriteResult, false),
		"CheckVideo":         kitex.NewMethodInfo(checkVideoHandler, newVideoServiceCheckVideoArgs, newVideoServiceCheckVideoResult, false),
		"UpdateCommentCount": kitex.NewMethodInfo(updateCommentCountHandler, newVideoServiceUpdateCommentCountArgs, newVideoServiceUpdateCommentCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func createVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceCreateVideoArgs)
	realResult := result.(*video.VideoServiceCreateVideoResult)
	success, err := handler.(video.VideoService).CreateVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCreateVideoArgs() interface{} {
	return video.NewVideoServiceCreateVideoArgs()
}

func newVideoServiceCreateVideoResult() interface{} {
	return video.NewVideoServiceCreateVideoResult()
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFeedArgs)
	realResult := result.(*video.VideoServiceFeedResult)
	success, err := handler.(video.VideoService).Feed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFeedArgs() interface{} {
	return video.NewVideoServiceFeedArgs()
}

func newVideoServiceFeedResult() interface{} {
	return video.NewVideoServiceFeedResult()
}

func mGetVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceMGetVideoArgs)
	realResult := result.(*video.VideoServiceMGetVideoResult)
	success, err := handler.(video.VideoService).MGetVideo(ctx, realArg.Red)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceMGetVideoArgs() interface{} {
	return video.NewVideoServiceMGetVideoArgs()
}

func newVideoServiceMGetVideoResult() interface{} {
	return video.NewVideoServiceMGetVideoResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishListArgs)
	realResult := result.(*video.VideoServicePublishListResult)
	success, err := handler.(video.VideoService).PublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishListArgs() interface{} {
	return video.NewVideoServicePublishListArgs()
}

func newVideoServicePublishListResult() interface{} {
	return video.NewVideoServicePublishListResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFavoriteListArgs)
	realResult := result.(*video.VideoServiceFavoriteListResult)
	success, err := handler.(video.VideoService).FavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFavoriteListArgs() interface{} {
	return video.NewVideoServiceFavoriteListArgs()
}

func newVideoServiceFavoriteListResult() interface{} {
	return video.NewVideoServiceFavoriteListResult()
}

func favoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFavoriteArgs)
	realResult := result.(*video.VideoServiceFavoriteResult)
	success, err := handler.(video.VideoService).Favorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFavoriteArgs() interface{} {
	return video.NewVideoServiceFavoriteArgs()
}

func newVideoServiceFavoriteResult() interface{} {
	return video.NewVideoServiceFavoriteResult()
}

func unfavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceUnfavoriteArgs)
	realResult := result.(*video.VideoServiceUnfavoriteResult)
	success, err := handler.(video.VideoService).Unfavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceUnfavoriteArgs() interface{} {
	return video.NewVideoServiceUnfavoriteArgs()
}

func newVideoServiceUnfavoriteResult() interface{} {
	return video.NewVideoServiceUnfavoriteResult()
}

func checkVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceCheckVideoArgs)
	realResult := result.(*video.VideoServiceCheckVideoResult)
	success, err := handler.(video.VideoService).CheckVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCheckVideoArgs() interface{} {
	return video.NewVideoServiceCheckVideoArgs()
}

func newVideoServiceCheckVideoResult() interface{} {
	return video.NewVideoServiceCheckVideoResult()
}

func updateCommentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceUpdateCommentCountArgs)
	realResult := result.(*video.VideoServiceUpdateCommentCountResult)
	success, err := handler.(video.VideoService).UpdateCommentCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceUpdateCommentCountArgs() interface{} {
	return video.NewVideoServiceUpdateCommentCountArgs()
}

func newVideoServiceUpdateCommentCountResult() interface{} {
	return video.NewVideoServiceUpdateCommentCountResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateVideo(ctx context.Context, req *video.CreateVideoRequest) (r *user.BaseResp, err error) {
	var _args video.VideoServiceCreateVideoArgs
	_args.Req = req
	var _result video.VideoServiceCreateVideoResult
	if err = p.c.Call(ctx, "CreateVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Feed(ctx context.Context, req *video.FeedRequest) (r *video.FeedResponse, err error) {
	var _args video.VideoServiceFeedArgs
	_args.Req = req
	var _result video.VideoServiceFeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetVideo(ctx context.Context, red *video.MGetVideoRequest) (r *video.MGetVideoResponse, err error) {
	var _args video.VideoServiceMGetVideoArgs
	_args.Red = red
	var _result video.VideoServiceMGetVideoResult
	if err = p.c.Call(ctx, "MGetVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, req *video.PublishListRequest) (r *video.PublishListResponse, err error) {
	var _args video.VideoServicePublishListArgs
	_args.Req = req
	var _result video.VideoServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, req *video.FavoriteListRequest) (r *video.FavoriteListResponse, err error) {
	var _args video.VideoServiceFavoriteListArgs
	_args.Req = req
	var _result video.VideoServiceFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Favorite(ctx context.Context, req *video.FavoriteRequest) (r *video.FavoriteResponse, err error) {
	var _args video.VideoServiceFavoriteArgs
	_args.Req = req
	var _result video.VideoServiceFavoriteResult
	if err = p.c.Call(ctx, "Favorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Unfavorite(ctx context.Context, req *video.UnfavoriteRequest) (r *video.UnfavoriteResponse, err error) {
	var _args video.VideoServiceUnfavoriteArgs
	_args.Req = req
	var _result video.VideoServiceUnfavoriteResult
	if err = p.c.Call(ctx, "Unfavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckVideo(ctx context.Context, req *video.CheckVideoRequest) (r *user.BaseResp, err error) {
	var _args video.VideoServiceCheckVideoArgs
	_args.Req = req
	var _result video.VideoServiceCheckVideoResult
	if err = p.c.Call(ctx, "CheckVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCommentCount(ctx context.Context, req *video.UpdateCommentCountRequest) (r *user.BaseResp, err error) {
	var _args video.VideoServiceUpdateCommentCountArgs
	_args.Req = req
	var _result video.VideoServiceUpdateCommentCountResult
	if err = p.c.Call(ctx, "UpdateCommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
